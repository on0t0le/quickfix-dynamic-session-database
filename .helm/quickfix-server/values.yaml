# Default values for quickfix-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: ghcr.io/on0t0le/quickfix-dynamic-session-database
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

java_opts: "-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n -Dspring.profiles.active=docker"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9880

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

mysql:
  enabled: true
  primary:
    extraFlags: "--log-bin-trust-function-creators=1"
    resources: {}

  auth:
    rootPassword: password
    username: testuser
    password: testuser
    database: quickfix

  # Required init script to have different schemas for the Application and Keycloak data
  initdbScripts:
    init.sql: |
      USE quickfix;
      CREATE TABLE sessions
      (
          beginstring       CHAR(8)     NOT NULL,
          sendercompid      VARCHAR(64) NOT NULL,
          sendersubid       VARCHAR(64) NOT NULL,
          senderlocid       VARCHAR(64) NOT NULL,
          targetcompid      VARCHAR(64) NOT NULL,
          targetsubid       VARCHAR(64) NOT NULL,
          targetlocid       VARCHAR(64) NOT NULL,
          session_qualifier VARCHAR(64) NOT NULL,
          creation_time     DATETIME    NOT NULL,
          incoming_seqnum   INT         NOT NULL,
          outgoing_seqnum   INT         NOT NULL,
          PRIMARY KEY (beginstring, sendercompid, sendersubid, senderlocid,
                      targetcompid, targetsubid, targetlocid, session_qualifier)
      );
      CREATE TABLE messages
      (
          beginstring       CHAR(8)     NOT NULL,
          sendercompid      VARCHAR(64) NOT NULL,
          sendersubid       VARCHAR(64) NOT NULL,
          senderlocid       VARCHAR(64) NOT NULL,
          targetcompid      VARCHAR(64) NOT NULL,
          targetsubid       VARCHAR(64) NOT NULL,
          targetlocid       VARCHAR(64) NOT NULL,
          session_qualifier VARCHAR(64) NOT NULL,
          msgseqnum         INT         NOT NULL,
          message           TEXT        NOT NULL,
          PRIMARY KEY (beginstring, sendercompid, sendersubid, senderlocid,
                      targetcompid, targetsubid, targetlocid, session_qualifier,
                      msgseqnum)
      );
      CREATE TABLE messages_log
      (
          id                INT UNSIGNED NOT NULL AUTO_INCREMENT,
          time              DATETIME     NOT NULL,
          beginstring       CHAR(8)      NOT NULL,
          sendercompid      VARCHAR(64)  NOT NULL,
          sendersubid       VARCHAR(64)  NOT NULL,
          senderlocid       VARCHAR(64)  NOT NULL,
          targetcompid      VARCHAR(64)  NOT NULL,
          targetsubid       VARCHAR(64)  NOT NULL,
          targetlocid       VARCHAR(64)  NOT NULL,
          session_qualifier VARCHAR(64)  NOT NULL,
          text              TEXT         NOT NULL,
          PRIMARY KEY (id)
      );
      CREATE TABLE event_log
      (
          id                INT UNSIGNED NOT NULL AUTO_INCREMENT,
          time              DATETIME     NOT NULL,
          beginstring       CHAR(8)      NOT NULL,
          sendercompid      VARCHAR(64)  NOT NULL,
          sendersubid       VARCHAR(64)  NOT NULL,
          senderlocid       VARCHAR(64)  NOT NULL,
          targetcompid      VARCHAR(64)  NOT NULL,
          targetsubid       VARCHAR(64)  NOT NULL,
          targetlocid       VARCHAR(64)  NOT NULL,
          session_qualifier VARCHAR(64),
          text              TEXT         NOT NULL,
          PRIMARY KEY (id)
      );
